name: CI

on:
  pull_request: {}
  push:
    branches: [ master ]

jobs:
  scan-repo:
    name: Scan repository
    runs-on: ubuntu-latest

    steps:
      - name: Checkout files in the repository
        uses: actions/checkout@v2

      - name: Scan files
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "table"
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"
          exit-code: "1"

  list-images:
    name: Process images
    runs-on: ubuntu-latest

    outputs:
      images-matrix: ${{ steps.build-matrix.outputs.matrix }}

    steps:
      - name: Checkout files in the repository
        uses: actions/checkout@v2

      - id: changed-files
        name: Get list of modified and added files
        uses: jitterbit/get-changed-files@v1

      - id: changed-images
        name: Create list of changed images
        run: |
          directories=$(echo "${{ steps.changed-files.outputs.all }}" \
            | tr ' ' '\n' | xargs -n 1 dirname | sort | uniq | paste -sd ' ')
          printf '::set-output name=directories::'
          find $directories -maxdepth 1 -type f -name 'Dockerfile' \
            -printf '%h\n' | paste -sd ' '

      - id: build-matrix
        name: Generate build matrix for changed images
        run: |
          printf '::set-output name=matrix::{"include":['
          echo "${{ steps.changed-images.outputs.directories }}" | tr ' ' '\n' \
            | sed 's/^/{"image":"/;s/$/"}/' | paste -sd ',' | tr -d '\n'
          printf ']}'

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: list-images

    if: ${{ ! contains(needs.list-images.outputs.images-matrix, '""') }}

    strategy:
      matrix: ${{ fromJSON(needs.list-images.outputs.images-matrix) }}

    steps:
      - name: Checkout files in the repository
        uses: actions/checkout@v2

      - name: Build ${{ matrix.image }}
        run: |
          docker build -t "${{ matrix.image }}" \
            --label org.label-schema.build-date=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --label org.label-schema.vcs-ref=${{ github.sha }} \
            "${{ matrix.image }}"
          docker save "${{ matrix.image }}" | gzip > "${{ matrix.image }}.tgz"

      - name: Upload built image
        uses: actions/upload-artifact@v2
        if: success()
        with:
          name: images
          path: ${{ matrix.image }}.tgz

  push:
    name: Push images
    runs-on: ubuntu-latest
    needs: [ build, scan-repo ]

    if: success() && github.ref == 'refs/heads/master'

    env:
      IMAGE_PREFIX: ghcr.io/${{ github.repository_owner }}

    steps:
      - name: Log into GHCR
        run:  |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io \
            -u ${{ github.repository_owner }} --password-stdin

      - name: Download built images
        uses: actions/download-artifact@v2
        with: { name: images }

      - name: Push built images to GHCR
        run: |
          for image in *.tgz; do
            docker load < "$image"
            docker tag "${image%.*}" "$IMAGE_PREFIX/${image%.*}:latest"
            docker push "$IMAGE_PREFIX/${image%.*}:latest"
          done
